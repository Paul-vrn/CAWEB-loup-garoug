// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider                = "prisma-client-js"
  interactiveTransactions = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  password  String
  Player    Player[]
  createdAt DateTime @default(now())
}

enum StateGame {
  LOBBY
  DAY
  NIGHT
  END
}

model Game {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  state   StateGame
  players Player[]

  // config
  deadline   DateTime // date du jour où ça commence
  minPlayer  Int      @default(5) // nombre de joueurs
  maxPlayer  Int      @default(20) // nombre de joueurs
  wolfProb   Float    @default(0.3) // default 1/3
  seerProb   Float    @default(0)
  insomProb  Float    @default(0)
  contProb   Float    @default(0)
  spiritProb Float    @default(0)
  // par défault 8h
  startDay   DateTime @default(dbgenerated("'08:00:00'")) @db.Time()
  endDay     DateTime @default(dbgenerated("'22:00:00'")) @db.Time()

  dayChat          DayChatRoom     @relation(fields: [dayChatRoomId], references: [id])
  dayChatRoomId    Int             @unique
  nightChat        NightChatRoom   @relation(fields: [nightChatRoomId], references: [id])
  nightChatRoomId  Int             @unique
  spiritChat       SpiritChatRoom? @relation(fields: [spiritChatRoomId], references: [id])
  spiritChatRoomId Int?            @unique

  elections Election[] @relation("game_elections")
  curElec   Election?  @relation(name: "current_election", fields: [curElecId], references: [id])
  curElecId Int?       @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum StatePlayer {
  ALIVE
  DEAD
}

enum Role {
  WOLF
  VILLAGER
}

enum Power {
  INSOMNIAC // insomniaque
  SEER // voyante
  CONTAMINATOR // contaminateur
  SPIRIT // esprit
  NONE // aucun
}

model Player {
  state     StatePlayer?
  role      Role?
  power     Power?
  usedPower Boolean   @default(false)
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  game      Game         @relation(fields: [gameId], references: [id])
  gameId    Int
  vote      Vote[]       @relation("voters")
  target    Vote[]       @relation("targets")
  readers   Reader[]
  writers   Writer[]
  messages  Message[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@id([userId, gameId])
}

model Election {
  id              Int      @id @default(autoincrement())
  votes           Vote[]
  game            Game     @relation(name: "game_elections", fields: [gameId], references: [id])
  gameId          Int
  currentElection Game?    @relation(name: "current_election")
  day             DateTime @default(now())
}

model Vote {
  voters     Player   @relation(name: "voters", fields: [voterId, gameId], references: [userId, gameId])
  voterId    String
  targets    Player   @relation(name: "targets", fields: [targetId, gameId], references: [userId, gameId])
  targetId   String
  gameId     Int
  election   Election @relation(fields: [electionId], references: [id])
  electionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([voterId, targetId, electionId])
}

model ChatRoom {
  id        Int              @id @default(autoincrement())
  messages  Message[]
  readers   Reader[]
  writers   Writer[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  nightChat NightChatRoom[]
  dayChat   DayChatRoom[]
  spirit    SpiritChatRoom[]
}

model NightChatRoom {
  id       Int      @id @default(autoincrement())
  game     Game?
  chatRoom ChatRoom @relation(fields: [id], references: [id])
}

model DayChatRoom {
  id       Int      @id @default(autoincrement())
  game     Game?
  chatRoom ChatRoom @relation(fields: [id], references: [id])
}

model SpiritChatRoom {
  id       Int      @id @default(autoincrement())
  game     Game?
  chatRoom ChatRoom @relation(fields: [id], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  content    String
  author     Player   @relation(fields: [authorId, gameId], references: [userId, gameId])
  authorId   String
  gameId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reader {
  player     Player   @relation(fields: [playerId, gameId], references: [userId, gameId])
  playerId   String
  gameId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int

  @@id([playerId, gameId, chatRoomId])
}

model Writer {
  player     Player   @relation(fields: [playerId, gameId], references: [userId, gameId])
  playerId   String
  gameId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int

  @@id([playerId, gameId, chatRoomId])
}
